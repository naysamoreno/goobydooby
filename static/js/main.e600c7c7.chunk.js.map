{"version":3,"sources":["logo.svg","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","renderbody","element","ReactDom","render","document","getElementById","Navbar","className","value","React","Component","Navbutton","onClick","this","handleClick","props","Navbutton1","Navbutton2","src","logo","Navbutton3","Navbutton4","Navbutton5","App","id","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,mOCK3C,SAASC,EAAWC,GAChBC,IAASC,OAAOF,EAASG,SAASC,eAAe,Y,IAE/CC,E,uKAEE,OACI,yBAAKC,UAAU,UACX,kBAAC,EAAD,CAAYC,MAAM,OAAlB,MACA,kBAAC,EAAD,CAAYA,MAAM,WAAlB,MACA,kBAAC,EAAD,CAAYA,MAAM,UAAlB,MACA,kBAAC,EAAD,CAAYA,MAAM,UAAlB,MACA,kBAAC,EAAD,CAAYA,MAAM,UAAlB,W,GARKC,IAAMC,WAcrBC,E,uKAEE,OAEI,0BAAMJ,UAAU,YAAYK,QAASC,KAAKC,aAA1C,IAAyDD,KAAKE,MAAMP,MAApE,S,GAJYC,IAAMC,WASvBM,E,4KAEKhB,EACI,yBAAKO,UAAU,iBAAf,c,GAHUI,GAOnBM,E,4KAEIjB,EACI,yBAAKO,UAAU,iBAAf,eAEI,yBAAKW,IAAKC,Y,GALHR,GAUnBS,E,4KAECpB,EACI,yBAAKO,UAAU,iBAAf,c,GAHcI,GAQpBU,E,4KAEMrB,EACI,yBAAKO,UAAU,iBAAf,c,GAHSI,GAOnBW,E,4KAEKtB,EACI,yBAAKO,UAAU,iBAAf,c,GAHUI,GAOVL,IC1DAiB,MATf,WACE,OACE,yBAAKC,GAAG,OACJ,kBAAC,EAAD,MACA,yBAAKA,GAAG,cCKIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS3B,OACP,kBAAC,IAAM4B,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e600c7c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDom from 'react-dom';\nimport logo from './logo.svg';\nimport './Navbar.css'\n\nfunction renderbody(element) {\n    ReactDom.render(element, document.getElementById(\"navBody\"))\n}\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <div className=\"navbar\">\n                <Navbutton1 value=\"pro\">  </Navbutton1>\n                <Navbutton2 value=\"button2\">  </Navbutton2>\n                <Navbutton3 value=\"button\">  </Navbutton3>\n                <Navbutton4 value=\"button\">  </Navbutton4>\n                <Navbutton5 value=\"button\">  </Navbutton5>\n            </div>\n        )\n    }\n}\n\nclass Navbutton extends React.Component {\n    render() {\n        return (\n        \n            <span className=\"navbutton\" onClick={this.handleClick}> {this.props.value} </span>\n    \n        )\n    }\n }\n class Navbutton1 extends Navbutton {\n     handleClick() {\n            renderbody(\n                <div className=\"navBody page1\">hello</div>\n            )\n     }\n }\n class Navbutton2 extends Navbutton {\n    handleClick() {\n           renderbody(\n               <div className=\"navBody page2\">\n                   Welcome Joel\n                   <img src={logo}></img>\n               </div>\n               )\n            }\n        }\n class Navbutton3 extends Navbutton {\n    handleClick() {\n        renderbody(\n            <div className=\"navBody page3\">hello</div>\n            )\n        }\n    }\n\nclass Navbutton4 extends Navbutton {\n    handleClick() {\n            renderbody(\n                <div className=\"navBody page4\">hello</div>\n                )\n    }\n}\nclass Navbutton5 extends Navbutton {\n    handleClick() {\n           renderbody(\n               <div className=\"navBody page5\">hello</div>\n               )\n            }\n        }\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nfunction App() {\n  return (\n    <div id=\"App\">\n        <Navbar></Navbar>\n        <div id=\"navBody\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}