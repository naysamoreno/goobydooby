{"version":3,"sources":["pictures/hand.jpg","logo.svg","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","renderbody","element","navBody","document","getElementById","animation","TimelineLite","onComplete","pause","progress","style","Animation","to","x","opacity","ReactDom","render","ease","play","home","className","casa","src","hand","width","height","alt","page3","page4","page5","Navbar","body","React","Component","Navbutton","handleClick","props","onClick","this","children","App","id","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,yFCA3CD,EAAOC,QAAU,IAA0B,kC,4KCe3C,SAASC,EAAWC,GAChB,IAAMC,EAAUC,SAASC,eAAe,YAV5C,WACI,IAAMF,EAAUC,SAASC,eAAe,WAClCC,EAAY,IAAIC,IAAa,CAACC,WAAY,WAC5CF,EAAUG,QACVH,EAAUI,SAAS,GACnBP,EAAQQ,MAAQ,MAEpB,OAAOL,GAIPM,GACCC,GAAGV,EAAS,GAAK,CAACW,GAAI,IAAMC,QAAS,IACrCF,GAAGV,EAAS,EAAG,CAACW,EAAG,IAAMN,WAAY,kBAAMQ,IAASC,OAAOf,EAASC,MACpEU,GAAGV,EAAS,GAAK,CAACW,EAAG,EAAGC,QAAS,EAAGG,KAAM,wBAI1CC,OAGL,IAAMC,EAAO,yBAAKC,UAAU,kBACtBC,EACF,yBAAKD,UAAU,iBAAf,oBAEY,yBAAKE,IAAKC,IAAMC,MAAM,QAAQC,OAAO,MAAMC,IAAI,UAEzDC,EAAQ,yBAAKP,UAAU,iBAAf,0BAGRQ,EAAQ,yBAAKR,UAAU,iBAAf,iBAGRS,EAAQ,yBAAKT,UAAU,kBAIvBU,E,uKAEE,OACI,yBAAKV,UAAU,UACX,kBAAC,EAAD,CAAWW,KAAMZ,GAAjB,UACA,kBAAC,EAAD,CAAWY,KAAMV,GAAjB,gBACA,kBAAC,EAAD,CAAWU,KAAMJ,GAAjB,gBACA,kBAAC,EAAD,CAAWI,KAAMH,GAAjB,gBACA,kBAAC,EAAD,CAAWG,KAAMF,GAAjB,kB,0CAMR7B,EAAWmB,O,GAdEa,IAAMC,WAkBrBC,E,4MASFC,YAAc,WACVnC,EAAW,EAAKoC,MAAML,O,uDARtB,OAEI,0BAAMX,UAAU,YAAYiB,QAASC,KAAKH,aAA1C,IAAyDG,KAAKF,MAAMG,SAApE,S,GAJYP,IAAMC,WAafH,IC9DAU,MATf,WACE,OACE,yBAAKC,GAAG,OACJ,kBAAC,EAAD,MACA,yBAAKA,GAAG,cCKIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAASC,eAAe,SDyHpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.db4f4b5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hand.4ef3518a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDom from 'react-dom';\nimport logo from './logo.svg';\nimport hand from './pictures/hand.jpg';\nimport './Navbar.css'\nimport { gsap,TimelineLite } from 'gsap/all'\nfunction Animation() {\n    const navBody = document.getElementById(\"navBody\")\n    const animation = new TimelineLite({onComplete: () => {\n        animation.pause();\n        animation.progress(0);\n        navBody.style = \"\";\n    }});\n    return animation;\n}\nfunction renderbody(element) {\n    const navBody = document.getElementById(\"navBody\");\n    Animation()\n    .to(navBody, 0.5, {x: -2000, opacity: 0})\n    .to(navBody, 0, {x: 2000, onComplete: () => ReactDom.render(element, navBody)})\n    .to(navBody, 0.4, {x: 0, opacity: 1, ease: \"elastic.out(.75, 1)\"})\n    // .to(navBody, 0, {rotationZ: 180, rotationY: 180})\n    // .to(navBody, 0.8, {rotationX: 90, onComplete: () => ReactDom.render(element, navBody)})\n    // .to(navBody, 0.8, {rotationX: 180})\n    .play();\n}\n\nconst home = <div className=\"navBody page1\"></div>;\nconst casa = (\n    <div className=\"navBody page2\">\n                Welcome 2 My Crib\n                <img src={hand} width=\"500px\" height=\"800\" alt=\"hand\"></img>\n                </div>);\nconst page3 = <div className=\"navBody page3\">\n                I SEE YOU CLICKED HERE\n                </div>;\nconst page4 = <div className=\"navBody page4\">\n                Is cute af (:\n                </div>;\nconst page5 = <div className=\"navBody page5\"></div>;\n\n\n\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <div className=\"navbar\">\n                <Navbutton body={home}> Home </Navbutton>\n                <Navbutton body={casa}> press here </Navbutton>\n                <Navbutton body={page3}> click here </Navbutton>\n                <Navbutton body={page4}> your momma </Navbutton>\n                <Navbutton body={page5}> last page </Navbutton>\n            </div>\n        )\n    }\n\n    componentDidMount () {\n        renderbody(home)\n    }\n}\n\nclass Navbutton extends React.Component {\n    render() {\n        return (\n        \n            <span className=\"Navbutton\" onClick={this.handleClick}> {this.props.children} </span>\n    \n        )\n    }\n    \n    handleClick = () => {\n        renderbody(this.props.body)\n    }\n }\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nfunction App() {\n  return (\n    <div id=\"App\">\n        <Navbar></Navbar>\n        <div id=\"navBody\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}