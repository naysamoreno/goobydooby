{"version":3,"sources":["pictures/hand.jpg","Music/Flow.mp3","Util.js","buttons/AudioPlayer.js","3D shit/Visualizer.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RETRO_COLORS","getRandomValueFromArray","list","Math","floor","random","length","getRandomRetroColor","AudioPlayer","props","getFrequencyData","audioAnalyser","addEventListeners","button","addEventListener","handleClick","listener","AudioListener","audio","Audio","camera","add","AudioLoader","load","song","buffer","setBuffer","play","this","onAudioPlay","bind","AudioAnalyser","frequencyCount","document","createElement","innerHTML","style","Visualizer","generateMatrix","matrix","geometry","THREE","sqrt","offSet","size","index","myColor","material","color","row","col","mesh","position","y","x","z","scene","push","update","requestAnimationFrame","rotation","amplitude","audioPlayer","console","log","scale","set","wesh","renderer","render","setUpAudio","mount","appendChild","removeChild","H","window","innerHeight","W","innerWidth","background","aspectRatio","lookAt","light","setSize","setPixelRatio","devicePixelRatio","shadowMap","enabled","domElement","ref","React","Component","renderbody","element","navBody","getElementById","animation","TimelineLite","onComplete","pause","progress","Animation","to","opacity","ReactDom","ease","home","className","casa","src","hand","width","height","alt","page3","title","frameborder","allow","allowfullscreen","allowtransparency","page4","FlowSong","page5","page6","left","top","transform","Navbar","body","Navbutton","onClick","children","App","id","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8fb7bf63.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hand.4ef3518a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Flow.5c8f7d60.mp3\";","const RETRO_COLORS = [\"rgb(255,237,130)\",\"rgb(240,207,207)\",\"rgb(236,90,90)\",\"rgb(147,212,165)\",\"rgb(134,221,205)\"]\n\nexport function getRandomValueFromArray(list) {\n    const index = Math.floor(Math.random() * list.length)\n    \n    return list[index]\n}\n\nexport function getRandomRetroColor() {\n    return getRandomValueFromArray(RETRO_COLORS)\n}","import { Audio, AudioLoader, AudioAnalyser, AudioListener} from \"three\"\n\n\nclass AudioPlayer {\n    constructor(props) {\n        this.props = props;\n        // this is how you create an HTML Element in Javascript\n        this.button = document.createElement(\"button\"); // <button></button>\n        this.button.innerHTML = (\"play\"); // <button> Play </button>\n        this.button.style = `\n            position: fixed;\n            left: 50%;\n            top: 50%;\n            transform: translate(-50%, -50%);\n        `;\n\n        this.addEventListeners()\n    }\n\n    getFrequencyData = () => {\n        return this.audioAnalyser.getFrequencyData();\n    }\n\n    addEventListeners = () => {\n        this.button.addEventListener(\"click\", this.handleClick);\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API \n    handleClick = () => {;\n        const listener = new AudioListener();\n        const audio = new Audio(listener); // <audio></audio>\n        this.props.camera.add(listener);\n        const loader = new AudioLoader();\n        loader.load(this.props.song, function(buffer) {\n            audio.setBuffer(buffer)\n            audio.play()\n            this.props.onAudioPlay()\n        }.bind(this));\n        this.audioAnalyser = new AudioAnalyser(audio, this.props.frequencyCount || 2048);\n    }\n\n}\n \nexport default AudioPlayer;\n\n","import React from \"react\"\nimport * as THREE from \"three\"\nimport {getRandomRetroColor} from \"../Util\"\nimport AudioPlayer from\"../buttons/AudioPlayer\"\n\n\n\nclass Visualizer extends React.Component {\n    componentDidMount() {\n        this.H = window.innerHeight\n        this.W = window.innerWidth\n        \n        this.scene = new THREE.Scene() \n        this.scene.background = new THREE.Color(\"skyblue\")\n\n        const fieldOfView = 95\n        const aspectRatio = this.W/this.H \n        const nearPlane = 0.1\n        const farPlane =  1000\n        this.camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane)\n        this.camera.position.x = 0\n        this.camera.position.y = 0\n        this.camera.position.z = 10\n        this.camera.lookAt(this.scene.position)\n\n        const light = new THREE.AmbientLight(0x404040)\n        this.scene.add(light)\n\n        this.generateMatrix()\n        this.setUpAudio()\n        this.renderer = new THREE.WebGLRenderer() \n        this.renderer.setSize(this.W, this.H)\n        this.renderer.setPixelRatio(window.devicePixelRatio)\n        this.renderer.shadowMap.enabled = true\n        this.mount.appendChild(this.renderer.domElement) \n        this.renderer.render(this.scene, this.camera)   \n\n    }\n\n    generateMatrix = () => {\n\n        this.matrix = []\n        const size = 5\n        const geometry = new THREE.BoxBufferGeometry(size, size, size)\n        const numberOfCubes = 100\n    \n        const sqrt = Math.sqrt(numberOfCubes)\n        const spacing = 2\n        const space =  size + spacing\n        const offSet = (sqrt * space) / 2 \n        for (let index = 0; index < numberOfCubes; index++) {\n            const myColor = getRandomRetroColor()\n            const material = new THREE.MeshPhongMaterial({\n                color: myColor\n            })\n            const row = index % sqrt\n            const col = index / sqrt\n    \n            \n            const mesh = new THREE.Mesh(geometry, material)\n            mesh.position.y = (row * space) - offSet;\n            mesh.position.x = (col * space) -  offSet;\n            mesh.position.z = -50\n        \n\n            this.scene.add(mesh);\n            this.matrix.push(mesh);\n        }\n    \n        \n        // const geometry = new THREE.BoxGeometry(1,1,1)\n        // const material = new THREE.MeshBasicMaterial({color: getRandomRetroColor()})\n        // this.mesh = new THREE.Mesh(geometry, material) \n        // this.mesh.position.set(0,0,0)\n        // this.scene.add(this.mesh)\n\n        // const sphereGeometry = new THREE.SphereGeometry(3)\n        // const sphereMaterial = new THREE.MeshBasicMaterial({color: getRandomRetroColor(), shading: THREE.SmoothShading})\n        // this.wesh = new THREE.Mesh(sphereGeometry, sphereMaterial)\n        // this.wesh.position.set(15,0,-10)\n        // this.scene.add(this.wesh)\n    }\n    update = () => {\n        requestAnimationFrame(this.update)\n\n        // this.wesh.rotation.x -= 0.01\n        this.mesh.rotation.x += 0.01\n\n        const frequencyList = this.audioPlayer.getFrequencyData()\n        const amplitude = (frequencyList[0] / 50) + 1\n        console.log(amplitude)\n        this.mesh.scale.set(amplitude, amplitude, amplitude)  \n        this.wesh.scale.set(amplitude, amplitude, amplitude)\n\n        this.renderer.render(this.scene, this.camera)\n    }\n\n    setUpAudio = () => {\n        this.audioPlayer = new AudioPlayer({\n            camera: this.camera,\n            song: this.props.song,\n            onAudioPlay: this.onAudioPlay,\n            frequencyCount: 128\n        })\n        this.mount.appendChild(this.audioPlayer.button);\n    }\n\n    onAudioPlay = () => {\n        this.mount.removeChild(this.audioPlayer.button);\n        this.update()\n    }\n\n\n    render() {\n        return (     \n            <div ref={ref => (this.mount = ref)} />\n        )\n    }\n}\n\nexport default Visualizer","import React from 'react';\nimport ReactDom from 'react-dom';\nimport hand from './pictures/hand.jpg';\nimport './Navbar.css'\nimport {TimelineLite } from 'gsap/all'\nimport Visualizer from './3D shit/Visualizer'\nimport {getRandomValueFromArray} from './Util'\nimport FlowSong from './Music/Flow.mp3'\n\nfunction Animation() {\n    const navBody = document.getElementById(\"navBody\")\n    const animation = new TimelineLite({onComplete: () => {\n        animation.pause();\n        animation.progress(0);\n        navBody.style = \"\";\n    }});\n    return animation;\n}\nfunction renderbody(element) {\n    const navBody = document.getElementById(\"navBody\");\n    Animation()\n    .to(navBody, 0.5, {x: -2000, opacity: 0})\n    .to(navBody, 0, {x: 2000, onComplete: () => ReactDom.render(element, navBody)})\n    .to(navBody, 0.4, {x: 0, opacity: 1, ease: \"elastic.out(.75, 1)\"})\n    // .to(navBody, 0, {rotationZ: 180, rotationY: 180})\n    // .to(navBody, 0.8, {rotationX: 90, onComplete: () => ReactDom.render(element, navBody)})\n    // .to(navBody, 0.8, {rotationX: 180})\n    .play();\n}\n\nconst home = <div className=\"navBody page1\"></div>;\nconst casa = (\n    <div className=\"navBody page2\">\n                Welcome 2 My Crib\n                <img src={hand} width=\"500px\" height=\"800\" alt=\"hand\"></img>\n                </div>);\nconst page3 = <div className=\"navBody page3\">\n                <h1 className=\"text\"> \n                I SEE YOU CLICKED HERE\n                </h1>\n                <iframe title='youtube music video' className=\"video\" src=\"https://www.youtube.com/embed/DR6TtBmJ-CE\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n                <iframe title='spotify song menu' className=\"albumEmbed\" src=\"https://open.spotify.com/embed/album/46tsdG65ya5HOL8sUf5CS1\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe>\n                </div>;\nconst page4 = <Visualizer song={FlowSong}></Visualizer>\n\nconst page5 = <div className=\"navBody page5\"></div>;\n// for HTML style=\"color:red\"\nconst page6 = <div className=\"navBody page6\">\n                <h1 style={{\n                    color: \"red\",\n                    position: 'fixed',\n                    left: '50%',\n                    top: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    }}> \n        \n                Welcome to page 6\n                </h1>\n</div>\n\n\n\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <div className=\"navbar\">\n                <Navbutton body={home}> Home </Navbutton>\n                <Navbutton body={casa}> press here </Navbutton>\n                <Navbutton body={page3}> click here </Navbutton>\n                <Navbutton body={page4}> your momma </Navbutton>\n                <Navbutton body={page5}> last page </Navbutton>\n                <Navbutton body={page6}> Sike </Navbutton>\n\n            </div>\n        )\n    }\n\n    componentDidMount () {\n        getRandomValueFromArray([])\n        renderbody(home)\n    }\n}\n\nclass Navbutton extends React.Component {\n    render() {\n        return (\n        \n            <span className=\"Navbutton\" onClick={this.handleClick}> {this.props.children} </span>\n    \n        )\n    }\n    \n    handleClick = () => {\n        renderbody(this.props.body)\n    }\n }\nexport default Navbar;","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar'\nfunction App() {\n  return (\n    <div id=\"App\">\n        <Navbar></Navbar>\n        <div id=\"navBody\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}